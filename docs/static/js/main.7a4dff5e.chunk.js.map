{"version":3,"sources":["database","jump.js","App.js","index.js"],"names":["jump","h","top","document","getElementById","offsetTop","config","callback","done","TypeError","startTime","endTime","start","mid","$","extend","math","end","duration","precalculate","a","b","c","d","calculate","key","t","step","Date","now","val","requestAnimationFrame","createAnimator","offsetLeft","vals","window","scrollTo","animator","nodes","value","label","children","sql","node_sql","flatten_nodes","map","x","categories","pecentage_per_category","category","join","sql_to_nice_name","App","useState","db","setDb","error","setError","useEffect","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","DB","then","res","arrayBuffer","catch","console","log","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","to_dict","arr","dico","i","length","arrayColumn","n","average_score","data","count","sum","average","Number","explainer","checked","where","filter","checkbox_id","df","selected_explainer","setExplainer","setChecked","expanded","setExpanded","exec","results","setResults","column","columns","percentage","values","time_per_test","eligible_points","text","kept_xai","kept_tests","total_eligible_points","total_explainers","merged","push","pareto","pf","getParetoFrontier","optimize","pareto_time_per_test","pareto_percentage","y","mode","type","name","textposition","textfont","family","marker","size","explainer_df","explainer_column","explainer_row","row","explainer_cat_scores","explainer_error","explainer_scores","reverse","orientation","explainer_layout","height","title","font","showlegend","xaxis","tickangle","range","yaxis","gridwidth","bargap","too_much_filters","arxiv","className","id","class","onCheck","new_sql","err","sql_exec","onExpand","showExpandAll","href","target","layout","width","autorange","legend","yref","annotations","xref","showarrow","arrowhead","ax","ay","color","arrowcolor","onClick","points","onHover","getElementsByClassName","style","cursor","onUnhover","divId","ResultsTable","explainer_property","columnName","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7a4dff5e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/database.b2fa80fd.bin\";","export default function jump(h) {\r\n    var top = document.getElementById(h).offsetTop,\r\n        left = document.getElementById(h).offsetLeft;\r\n    var animator = createAnimator({\r\n        start: [0,0],\r\n        end: [left, top],\r\n        duration: 1000\r\n    }, function(vals){\r\n        // console.log(arguments);\r\n    \twindow.scrollTo(vals[0], vals[1]);\r\n    });\r\n    \r\n    //run\r\n    animator();\r\n}\r\n\r\n\r\n\r\n//Animator\r\n//Licensed under the MIT License\r\nfunction createAnimator(config, callback, done) {\r\n    if (typeof config !== \"object\") throw new TypeError(\"Arguement config expect an Object\");\r\n\r\n    var start = config.start,\r\n        mid = $.extend({}, start), //clone object\r\n        math = $.extend({}, start), //precalculate the math\r\n        end = config.end,\r\n        duration = config.duration || 1000,\r\n        startTime, endTime;\r\n\r\n    //t*(b-d)/(a-c) + (a*d-b*c)/(a-c);\r\n    function precalculate(a, b, c, d) {\r\n        return [(b - d) / (a - c), (a * d - b * c) / (a - c)];\r\n    }\r\n\r\n    function calculate(key, t) {\r\n        return t * math[key][0] + math[key][1];\r\n    }\r\n\r\n    function step() {\r\n        var t = Date.now();\r\n        var val = end;\r\n        if (t < endTime) {\r\n            val = mid;\r\n            for (var key in mid) {\r\n                mid[key] = calculate(key, t);\r\n            }\r\n            callback(val);\r\n            requestAnimationFrame(step);\r\n        } else {\r\n            callback(val);\r\n            done && done();\r\n        }\r\n    }\r\n\r\n    return function () {\r\n        startTime = Date.now();\r\n        endTime = startTime + duration;\r\n\r\n        for (var key in math) {\r\n            math[key] = precalculate(startTime, start[key], endTime, end[key]);\r\n        }\r\n\r\n        step();\r\n    }\r\n}","// some sql.js op https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport initSqlJs from \"sql.js\"; // https://sql.js.org/#%2F=     test env https://sql.js.org/examples/GUI/index.html\r\nimport pf from 'pareto-frontier';\r\nimport DB from './database';\r\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\"; // Required to let webpack 4 know it needs to copy the wasm file to our assets\r\nimport Plot from 'react-plotly.js';\r\nimport CheckboxTree from 'react-checkbox-tree';  // https://jakezatecky.github.io/react-checkbox-tree/\r\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";  // https://github.com/jakezatecky/react-checkbox-tree   \r\n// import DataTable from 'react-data-table-component'; todo [after acceptance] https://datatables.net/\r\nimport jump from \"./jump.js\";\r\nconst nodes = [\r\n{\r\n  value: 'main_checklist',\r\n  label: 'Filter:',\r\n  children: [\r\n{ // todo include all of them in one big node \"Filter:\"\r\n  value: 'supported_model_checklist',\r\n  label: 'I need to explain specific AI model(s):',\r\n  children: [\r\n      { value: 'supported_model_model_agnostic', label: 'Any (Model agnostic xAI alg.)', sql:'xai.supported_model_model_agnostic = 1' },\r\n      { value: 'supported_model_tree_based', label: 'Tree-based', sql:'xai.supported_model_tree_based = 1' },\r\n      { value: 'supported_model_neural_network', label: 'Neural Network', sql:'xai.supported_model_neural_network = 1'  },\r\n  ],\r\n},\r\n{\r\n  value: 'required_output_checklist',\r\n  label: 'I need specific output(s) from the XAI:',\r\n  children: [\r\n      { value: 'output_importance', label: 'Feature importance (Global Explanation)', sql:'xai.output_importance = 1'},\r\n      { value: 'output_attribution', label: 'Feature attribution (Local Explanation)', sql:'xai.output_attribution = 1' }, //  # We discuss the attribution problem, i.e., the problem of distributing the prediction score of a model for a specific input to its base features (cf. [15, 10, 19]); the attribution to a base feature can be interpreted as the importance of the feature to the prediction. https://arxiv.org/pdf/1908.08474.pdf\r\n      { value: 'output_interaction', label: 'Pair feature interaction (Global Explanation)', sql:'xai.output_interaction = 1' },\r\n      // # Definition 1 (Statistical Non-Additive Interaction). A function f contains a statistical non-additive interaction of multiple features indexed in set I if and only if f cannot be decomposed into a sum of |I| subfunctions fi , each excluding the i-th interaction variable: f(x) =/= Sum i∈I fi(x\\{i}).\r\n      // #  Def. 1 identifies a non-additive effect among all features I on the output of function f (Friedman and Popescu, 2008; Sorokina et al., 2008; Tsang et al., 2018a). see https://arxiv.org/pdf/2103.03103.pdf\r\n      // # todo [after acceptance] we need a page with a clear description of each option\r\n      // { value: 'todo1', label: '#Future work: Pair interaction (Local Ex), multi F interaction, NLP, debugging ...', disabled:true  }\r\n  ]\r\n},\r\n{ value: 'required_input_data_', label: 'Check if we can NOT provide the following information to the xAI algorithm:',\r\n  children: [\r\n      { value: 'required_input_X_reference', label: 'A reference input data', sql:'xai.required_input_X_reference = 0' },\r\n      { value: 'required_input_truth_to_explain', label: 'Target values of the data points to explain (i.e. truth, not prediction)', sql:'xai.required_input_truth_to_explain = 0' },\r\n  ]\r\n},\r\n{ value: 'explainer_input_xai_', label: 'Check if we can NOT execute the following operations on the AI model:',\r\n  children: [\r\n      { value: 'required_input_predict_func', label: 'Perform addional predictions.', sql:'xai.required_input_predict_func = 0' }\r\n      // { value: 'required_input_train_function', label: '#Future work: Retrain the model.', disabled:true },\r\n  ]\r\n},\r\n{ value: 'test_adversarial_attacks', label: 'I trust the xAI output (I created the data and the model myself)', sql: \"t.category != 'fragility'\"}\r\n// { value: 'assumptions_data_distribution_iid', label: '#Future work: Assume input features to be independent and identically distributed', disabled:true },\r\n// { value: 'explainer_need_gpu', label: '#Future work: Constraint on hardware equipement: xAI alg. require a GPU.', disabled:true }\r\n// {\r\n//   value: 'uid',\r\n//   label: 'visible'\r\n// },\r\n]}];\r\n\r\nvar node_sql = {}\r\nfunction flatten_nodes(nodes, node_sql){\r\n  nodes.map( x => {if ('sql' in x) node_sql[x.value]= x.sql})\r\n  nodes.map( x => {if ('children' in x) flatten_nodes(x.children, node_sql)})\r\n}\r\nflatten_nodes(nodes, node_sql)\r\n\r\nfunction average(data) {\r\n  /*Can't find an average function in JS, made one\r\n  This function is able to handle null values!!!*/\r\n    var count = null;\r\n    var sum = null;\r\n    for (let i=0; i<data.length; i++) {\r\n      if (data[i]) {\r\n        count++;\r\n        sum = sum + data[i];\r\n      }\r\n    }\r\n    if (count) {var average = Number( sum / count)} else { average=null}\r\n    return average;\r\n  }\r\n// if (window.location.href.includes(\"localhost\")) { console.log('localhost');}\r\n\r\nconst categories = ['fidelity', 'fragility', 'stability', 'simplicity', 'stress']  // todo get it from db\r\nconst pecentage_per_category = categories.map(category => ' ROUND(AVG(case category when \\''+category+'\\' then score end)*100.0,1) AS percentage_'+category).join(',\\n ');\r\nconst sql_to_nice_name = {'explainer':'Explainer',\r\n  'time_per_test':'Average time per test',\r\n  'eligible_points':'Number of compleated tests',\r\n  'percentage_fidelity':'Fidelity [%]',\r\n  'percentage_fragility':'Fragility [%]',\r\n  'percentage_stability':'Stability [%]',\r\n  'percentage_simplicity':'Simplicity [%]',\r\n  'percentage_stress':'Stress test [%]',\r\n}\r\nexport default function App() {\r\n  const [db, setDb] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\r\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\r\n    // see ../craco.config.js\r\n    try {\r\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\r\n      const dataPromise = fetch(DB).then(res => res.arrayBuffer()).catch((error) => {\r\n        console.log('File not found:')\r\n        console.log(error)\r\n      });\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n      console.log('sql ok.')\r\n      setDb(new SQL.Database(new Uint8Array(buf)));\r\n    } catch (err) {\r\n      console.log('sql error:')\r\n      setError(err);\r\n    }\r\n  }, []);\r\n\r\n  if (error) return <pre>{error.toString()}</pre>;\r\n  else if (!db) return <pre>Loading...</pre>;\r\n  else return <SQLRepl db={db} />;\r\n}\r\n\r\nfunction to_dict(arr){\r\n  let dico = {}\r\n  for(let i = 0; i < arr.length; i++){\r\n      dico[arr[i]] = i;\r\n  }\r\n  return dico\r\n}\r\nconst arrayColumn = (arr, n) => arr.map(x => x[n]);\r\nconst average_score = (arr, dico) => arr.map(x => average( categories.map(c => x[dico['percentage_' + c]])));\r\n\r\nfunction sql(explainer, checked){\r\n  var where = checked.filter(checkbox_id => checkbox_id in node_sql).map( x => node_sql[x]).join(' AND ')\r\n  if (where.length > 0) where = 'Where ' + where + ' \\n'\r\n  const r = `\r\n  --0 For Plotly\r\n  SELECT\tc.explainer,\r\nROUND(AVG(c.time),2) AS time_per_test,\r\ncount(c.score) AS eligible_points,\r\n` + pecentage_per_category + ` \r\nFROM cross_tab AS c\r\nLeft JOIN test AS t ON c.test = t.test\r\nLeft JOIN explainer AS xai ON c.explainer = xai.explainer\r\n` + where + ` \r\nGROUP BY c.explainer;\r\n\r\n--1 details about the selected explainer\r\nSELECT\tdescription AS 'xAI description',\r\n        supported_models AS 'Supported AI models',\r\n        outputs AS 'xAI outputs',\r\n        required_input_data AS 'Required info by the xAI',\r\n        p.source_paper_bibliography AS 'Original paper',\r\n        source_code AS 'Source code'\r\nFROM explainer AS xai\r\nLeft JOIN paper AS p ON xai.source_paper_tag = p.source_paper_tag\r\nWhere (explainer = '`+explainer+`');\r\n\r\n--2 detailed scoring of the selected explainer\r\nSELECT\ttest.short_description AS '  ______Short_description______  ',\r\nROUND(score,2) AS Score, category AS 'test category',\r\ntested_xai_output AS 'Tested_xAI_output________'\r\n--  test.test, subtest no ROUND(time) to make things readable\r\nFROM cross_tab\r\nLeft JOIN test ON cross_tab.test = test.test\r\nWhere (explainer = '`+explainer+`') and (score IS NOT NULL)\r\nOrder By Score;\r\n-- order also by 'test category' test_subtest, 'Tested_xAI_output________';\r\n\r\n--3 Kept Unit tests\r\nSELECT\tcount(DISTINCT c.test_subtest) AS kept_tests\r\nFROM cross_tab AS c\r\nLeft JOIN test AS t ON c.test = t.test\r\nLeft JOIN explainer AS xai ON c.explainer = xai.explainer\r\n` + where + `;\r\n\r\n--4 total xAi and tests\r\nSELECT\tcount(DISTINCT c.test_subtest) AS total_eligible_points,\r\n    \tcount(DISTINCT c.explainer) AS total_explainers\r\nFROM cross_tab AS c;\r\n`;\r\n// console.log(r)\r\nreturn r\r\n}\r\n/**\r\n * A simple SQL read-eval-print-loop\r\n * @param {{db: import(\"sql.js\").Database}} props\r\n */\r\nfunction SQLRepl({ db }) {\r\n  const [selected_explainer, setExplainer] = useState('kernel_shap');\r\n  const [checked, setChecked] = useState(['output_importance']);\r\n  const [expanded, setExpanded] = useState([]);\r\n  const [results, setResults] = useState(db.exec(sql(selected_explainer, checked)));\r\n  const [error, setError] = useState(null);\r\n  \r\n  // console.log(sql(selected_explainer));\r\n  // console.log('checked', checked);\r\n  function sql_exec(new_sql) {\r\n    try {\r\n      // The sql is executed synchronously on the UI thread. You may want to use a web worker here instead\r\n      setResults(db.exec(new_sql)); // an array of objects is returned\r\n      setError(null);\r\n    } catch (err) {\r\n      // exec throws an error when the SQL statement is invalid\r\n      setError(err);\r\n      setResults([]);\r\n    }\r\n  }\r\n\r\n  function plotly_click(data){\r\n    console.log('plotly_click:')\r\n    console.log(data)\r\n    console.log(data.points) \r\n  \r\n    let explainer = data.points[0].text\r\n  \r\n    setExplainer(explainer)\r\n    try {\r\n      jump('Explainer_limits')\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    \r\n  }\r\n  var df;\r\n  df = results[0];\r\n  var column = to_dict(df.columns);\r\n\r\n  const percentage = average_score(df.values, column)\r\n  const time_per_test = arrayColumn(df.values, column['time_per_test']);\r\n  const eligible_points = arrayColumn(df.values, column['eligible_points']);\r\n  const text = arrayColumn(df.values, column['explainer']);\r\n  \r\n  const kept_xai = df.values.length\r\n  const kept_tests = results[3].values[0][0]\r\n  const total_eligible_points = results[4].values[0][0]\r\n  const total_explainers = results[4].values[0][1]\r\n  var merged = []\r\n  for (let i = 0; i < time_per_test.length; i++) {\r\n    merged.push([percentage[i], time_per_test[i]]);\r\n  }\r\n  const pareto = pf.getParetoFrontier(merged, { optimize: 'bottomRight' });\r\n\r\n  const pareto_time_per_test = arrayColumn(pareto, 1);\r\n  const pareto_percentage = arrayColumn(pareto, 0);\r\n\r\n  // }\r\n\r\n\r\n  const trace1 = { // todo after acceptance Plotly.animate('graph', { https://plotly.com/javascript/plotlyjs-function-reference/#plotlyanimate\r\n    x: time_per_test,\r\n    y: percentage,\r\n    mode: 'markers+text',\r\n    type: 'scatter',\r\n    name: 'Explainers',\r\n    text: text, // hover https://plotly.com/javascript/reference/\r\n    textposition: 'top center',\r\n    textfont: {\r\n      family:  'Raleway, sans-serif'\r\n    },\r\n    // legendgroup:\"exp\", // did not help :(\r\n    // showlegend:true,\r\n    marker: {\r\n      size: eligible_points.map(x => 2*x),\r\n      // showlegend:true, // did not help :(\r\n      // legendgroup:\"size\",\r\n     }\r\n  };\r\n\r\n\r\n  // const trace1_legend = {\r\n  //   x: time_per_test,\r\n  //   y: percentage,\r\n  //   mode: 'markers+text',\r\n  //   type: 'scatter',\r\n  //   text: text, // hover https://plotly.com/javascript/reference/\r\n  //   textposition: 'top center',\r\n  //   textfont: {\r\n  //     family:  'Raleway, sans-serif'\r\n  //   },\r\n  //   marker: { size: eligible_points.map(x => 2*x) },\r\n\r\n\r\n\r\n  //   legendgroup: \"size\",\r\n  //   visible:\"legendonly\",\r\n  //   name: 'Portability: completed tests without failiure',\r\n  // }\r\n\r\n  const trace2 = {\r\n    x: pareto_time_per_test,\r\n    y: pareto_percentage,\r\n    mode: 'lines',\r\n    type: 'scatter',\r\n    name: 'Pareto front',\r\n    // text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\r\n    textfont : {\r\n      family:'Times New Roman'\r\n    },\r\n    textposition: 'bottom center',\r\n    // marker: { size: 6 }\r\n  };\r\n  const data = [ trace1, trace2 ];\r\n\r\n  const layout = {\r\n    width: 900,\r\n    height: 580,\r\n    xaxis: {\r\n      // range: [ 0.75, 5.25 ],\r\n      type: 'log',\r\n      autorange: true,\r\n      title: {\r\n        text: 'Fast alg. <--     Average Time per test [Seconds] ↓     --> Slow alg.'\r\n      }\r\n    },\r\n    yaxis: {\r\n      range: [1, 100],\r\n      title: {\r\n        text: 'Poor <--  Average Score per test [%] ↑  --> Excelent'\r\n      }\r\n    },\r\n    legend: {\r\n      \"tracegroupgap\": 20,\r\n      y: 1,\r\n      yref: 'paper',\r\n      font: {\r\n        family: 'Arial, sans-serif',\r\n        // size: 20,\r\n        // color: 'grey',\r\n      },\r\n    },\r\n    annotations: [\r\n      {\r\n        x: 0.01,\r\n        y: 100,\r\n        xref: 'paper',\r\n        yref: 'y',\r\n        text: 'Best xAI(s) are close to this point',\r\n        showarrow: true,\r\n        arrowhead: 7,\r\n        ax: 15 ,\r\n        ay: -35,\r\n        font: {color:'#636363'},\r\n        arrowcolor:'#636363',\r\n      }\r\n    ],\r\n\r\n    title:{\r\n      text:\"<b>Figure 1</b>: Global overview of the explainers' performance.<br><b>Tip</b>: Click on an explainer for more details.\",\r\n    }\r\n  };  // todo [after acceptance] autosize: true, https://dev.to/dheerajmurali/building-a-responsive-chart-in-react-with-plotly-js-4on8\r\n\r\n  const explainer_df = results[1]\r\n  const explainer_column = to_dict(explainer_df.columns);\r\n  const explainer_row = df.values.filter(row => row[column['explainer']] == selected_explainer )\r\n\r\n\r\n  const explainer_cat_scores = (explainer_row.length > 0) ? categories.map(c => explainer_row[0][column['percentage_' + c]]) : categories.map(c => null)\r\n  const explainer_error = (explainer_row.length > 0) ? '' : `With the applied filters, none of remaining unit tests could be applied on this explainer,\r\n  please select another one by clicking on a blue dot in the first figure.`\r\n  // console.log(df.columns)\r\n  // console.log(explainer_row)\r\n  \r\n  const explainer_scores = [{\r\n    type: 'bar',\r\n    x: explainer_cat_scores.reverse(), // todo handel nan values\r\n    y: categories.reverse(),\r\n    text: explainer_cat_scores,\r\n    orientation: 'h',\r\n  }];\r\n\r\n  const explainer_layout = {\r\n    // height:280,\r\n    height:320,\r\n    title: '<b>Figure 2</b>: Score of <i>'+ selected_explainer +' Explainer</i> per category.',\r\n    font:{\r\n      family: 'Raleway, sans-serif'\r\n    },\r\n    showlegend: false,\r\n    xaxis: {\r\n      tickangle: -45,\r\n      range: [1, 100],\r\n      title: {\r\n        text: 'Score [%] ↑'\r\n      }\r\n    },\r\n    yaxis: {\r\n      // zeroline: false,\r\n      gridwidth: 2,\r\n      title: {\r\n        text: 'Sub scoring categories'\r\n      }\r\n    },\r\n    bargap :0.05\r\n  };\r\n\r\n  const too_much_filters = (kept_xai<=1) ? \"None of the indexed xAI satisfy the selected constrains. Please use less filters.\" : \"\"\r\n  const arxiv = 'https://arxiv.org/' // todo \r\n  return (\r\n    // todo add fork me on github\r\n    <div className=\"App\">\r\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\r\n      <h2 id='Filters' class=\"content-subhead\"  >1. shortlist xAI that fits your needs:</h2>\r\n      <pre>Use the filters below to describe the xAI model and the dataset you would like to explain.</pre>\r\n      {/* <a href=\"filters.html\">Click here to learn more about each constraint.</a> */}\r\n\r\n      <pre>\r\n        <CheckboxTree\r\n            nodes={nodes}\r\n            checked={checked}\r\n            expanded={expanded}\r\n            onCheck={checked => {sql_exec(sql(selected_explainer, checked));setChecked(checked); }}\r\n            onExpand={expanded => setExpanded(expanded)}\r\n            showExpandAll={true}\r\n        />\r\n      </pre>\r\n      <pre>Using the selected filters, we keep <b> {kept_xai} xAI tool(s) out of {total_explainers}</b> and <b>{kept_tests} unit test(s) out of {total_eligible_points}</b>.   </pre>\r\n      <pre className=\"error\">{(too_much_filters || \"\").toString()}</pre>\r\n      <pre>Below, we test every xAI on these {kept_tests} unit test(s). Every unit test evaluates a specific aspect of the xAI algorithm (the <b>fidelity</b> of the explanation to the AI behavior, the <b>stability</b> xAi against minor changes in the AI, etc.). <a href={arxiv}>Learn more about implemented unit tests and how the selection was done.</a></pre>\r\n\r\n      <h2 id='Overview_Plot'  class=\"content-subhead\" >2. Evaluate selected xAI using an intuitive scoring method:</h2>\r\n      <pre>The bubble plot below summarizes the average performance of the selected xAI(s): time on x-axis v.s. score in percentage on the y-axis.<br/>\r\nA perfect xAI should obtain a score of 100% and finish all {kept_tests} tests in the smallest amount of time. Therefore, it would be located on the top right.<br/>\r\nMoreover, some xAI might break while running, because of algorithmic/implementation issues. The dot size represents the number of tests completed without failure. Thus, higher portability is described with a bigger dot. <a href={arxiv} target=\"_blank\">Learn more about the overview plot.</a>\r\n</pre>\r\n      <Plot\r\n        data={data}\r\n        layout={layout}\r\n        onClick={plotly_click}\r\n        onHover={data => document.getElementsByClassName('nsewdrag')[0].style.cursor = 'pointer'}\r\n        onUnhover={data => document.getElementsByClassName('nsewdrag')[0].style.cursor = ''}\r\n        divId={'fig'}\r\n      />\r\n      <pre> An xAI can obtain a good average score but it might completely fail in a specific category of tests. <b>Table 1</b> contains a more detailed scoring method by subdividing the score into {categories.length} categories:<br/>\r\n      <b>Fidelity</b>:     Test if the xAI output reflects the underlying model.<br/>\r\n      <b>Fragility</b>:    Test if the xAI output is easily manipulable on purpose.<br/>\r\n      <b>Stability</b>:    Test if the xAI output is too sensitive to slight changes in the dataset/model.<br/>\r\n      <b>Simplicity</b>:   Users should be able to look at the explanation, and reason about model behavior.<br/>\r\n      <b>Stress tests</b>: Test if the xAI can explain models trained on big data.<br/>\r\n      <a href={arxiv} target=\"_blank\">See our paper for more details.</a>\r\n      </pre>\r\n\r\n      {/* on hover help https://reactjs.org/docs/events.html */}\r\n\r\n      <pre>\r\n          <pre className=\"fig_title\"><b>Table 1:</b> Subscores given the selected filters.</pre>\r\n          <ResultsTable columns={results[0].columns.map( x => sql_to_nice_name[x])} values={results[0].values} />\r\n      </pre>\r\n      <pre>Subscores change with the selected list of tests. Unselect all filters to have a global evaluation of the xAI or select the appropriate ones to obtain an evaluation of the use case of your need.</pre> \r\n      <pre></pre> {/* just need some spacing */}\r\n      <h2 id='Explainer_details'  class=\"content-subhead\" >3. {selected_explainer} Explainer: Details</h2>\r\n      <pre>Select one specific Explainer by clicking on a blue dot in Figure 1. Below you can find a helpful description of the explainer and its specific requirements.</pre> \r\n      <div>\r\n        {/* <pre id=\"description\"><b>Description:</b> {explainer_description}</pre> */\r\n        explainer_df.columns.map((explainer_property, i) => (\r\n            <pre><b>{explainer_property}:</b> {explainer_df.values[0][explainer_column[explainer_property]]}</pre> \r\n          ))\r\n        }\r\n      </div>\r\n      \r\n      <pre className=\"error\">{(explainer_error || \"\").toString()}</pre>\r\n      <Plot\r\n        data={explainer_scores}\r\n        layout={explainer_layout}\r\n        divId={'explainer_fig'}\r\n      />\r\n\r\n      <h2 id='Explainer_limits' class=\"content-subhead\" >4. {selected_explainer} Explainer: Limits of the interpretability of its output</h2>\r\n      <pre><b>Table 2</b> gives the most detailed scoring. Here you will learn when exactly {selected_explainer} fails in explaining a model. \r\nThe table is sorted by score (increasing) so you just need to look at the few first tests with a score below 80%. \r\nWant to learn how to deal with the limitations of the {selected_explainer} explainer? <a href=\"https://github.com/Karim-53/Compare-xAI/blob/main/data/01_raw/test.csv\" target=\"_blank\">See the workaround solution for each test here!</a>\r\n</pre>\r\n      <pre>\r\n        <pre className=\"fig_title\"><b>Table 2:</b> Score obtained by <b>{selected_explainer} explainer</b> for each test.</pre>\r\n        { // results contains one object per select statement in the query // results.map(({ columns, values }, i) => (<ResultsTable key={i} columns={columns} values={values} />))\r\n          <ResultsTable columns={results[2].columns} values={results[2].values}/>\r\n        }\r\n      </pre>\r\n      <pre>Table 2 is limited to the selected list of tests after filtering. Unselect all filters to have a global evaluation of the xAI or select the appropriate ones to obtain an evaluation of the use case of your need.</pre>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders a single value of the array returned by db.exec(...) as a table\r\n * @param {import(\"sql.js\").QueryExecResult} props\r\n */\r\nfunction ResultsTable({ columns, values }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {columns.map((columnName, i) => (\r\n            <td key={i}>{columnName}</td>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {\r\n          // values is an array of arrays representing the results of the query\r\n          values.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, i) => (\r\n                <td key={i}>{value}</td>\r\n              ))}\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}