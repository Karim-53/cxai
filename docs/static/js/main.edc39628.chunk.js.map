{"version":3,"sources":["database","jump.js","App.js","index.js"],"names":["jump","h","top","document","getElementById","offsetTop","animator","config","callback","done","TypeError","startTime","endTime","start","mid","$","extend","math","end","duration","precalculate","a","b","c","d","calculate","key","t","step","Date","now","val","requestAnimationFrame","createAnimator","offsetLeft","vals","console","log","arguments","window","scrollTo","nodes","value","label","children","sql","node_sql","flatten_nodes","map","x","categories","pecentage_per_category","category","join","App","useState","db","setDb","error","setError","useEffect","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","DB","then","res","arrayBuffer","catch","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","to_dict","arr","dico","i","length","arrayColumn","n","average_score","data","count","sum","average","Number","explainer","checked","where","filter","checkbox_id","df","selected_explainer","setExplainer","setChecked","expanded","setExpanded","exec","results","setResults","column","columns","percentage","values","time_per_test","eligible_points","text","merged","push","pareto","pf","getParetoFrontier","optimize","y","mode","type","name","textposition","textfont","family","marker","size","explainer_df","explainer_column","explainer_row","row","explainer_cat_scores","explainer_error","explainer_scores","orientation","className","onCheck","new_sql","err","sql_exec","onExpand","showExpandAll","layout","xaxis","autorange","title","yaxis","range","legend","yref","font","onClick","points","onHover","getElementsByClassName","style","cursor","onUnhover","divId","ResultsTable","id","showlegend","tickangle","gridwidth","bargap","href","columnName","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.edc39628.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/database.7b3c1e07.bin\";","export default function jump(h) {\r\n    var top = document.getElementById(h).offsetTop,\r\n        left = document.getElementById(h).offsetLeft;\r\n    var animator = createAnimator({\r\n        start: [0,0],\r\n        end: [left, top],\r\n        duration: 1000\r\n    }, function(vals){\r\n        console.log(arguments);\r\n    \twindow.scrollTo(vals[0], vals[1]);\r\n    });\r\n    \r\n    //run\r\n    animator();\r\n}\r\n\r\n\r\n\r\n//Animator\r\n//Licensed under the MIT License\r\nfunction createAnimator(config, callback, done) {\r\n    if (typeof config !== \"object\") throw new TypeError(\"Arguement config expect an Object\");\r\n\r\n    var start = config.start,\r\n        mid = $.extend({}, start), //clone object\r\n        math = $.extend({}, start), //precalculate the math\r\n        end = config.end,\r\n        duration = config.duration || 1000,\r\n        startTime, endTime;\r\n\r\n    //t*(b-d)/(a-c) + (a*d-b*c)/(a-c);\r\n    function precalculate(a, b, c, d) {\r\n        return [(b - d) / (a - c), (a * d - b * c) / (a - c)];\r\n    }\r\n\r\n    function calculate(key, t) {\r\n        return t * math[key][0] + math[key][1];\r\n    }\r\n\r\n    function step() {\r\n        var t = Date.now();\r\n        var val = end;\r\n        if (t < endTime) {\r\n            val = mid;\r\n            for (var key in mid) {\r\n                mid[key] = calculate(key, t);\r\n            }\r\n            callback(val);\r\n            requestAnimationFrame(step);\r\n        } else {\r\n            callback(val);\r\n            done && done();\r\n        }\r\n    }\r\n\r\n    return function () {\r\n        startTime = Date.now();\r\n        endTime = startTime + duration;\r\n\r\n        for (var key in math) {\r\n            math[key] = precalculate(startTime, start[key], endTime, end[key]);\r\n        }\r\n\r\n        step();\r\n    }\r\n}","// some sql.js op https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport initSqlJs from \"sql.js\"; // https://sql.js.org/#%2F=     test env https://sql.js.org/examples/GUI/index.html\r\nimport pf from 'pareto-frontier';\r\nimport DB from './database';\r\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\"; // Required to let webpack 4 know it needs to copy the wasm file to our assets\r\nimport Plot from 'react-plotly.js';\r\nimport CheckboxTree from 'react-checkbox-tree';  // https://jakezatecky.github.io/react-checkbox-tree/\r\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";  // https://github.com/jakezatecky/react-checkbox-tree   \r\n// import DataTable from 'react-data-table-component'; todo [after acceptance] https://datatables.net/\r\nimport jump from \"./jump.js\";\r\nconst nodes = [\r\n{\r\n  value: 'main_checklist',\r\n  label: 'Filter:',\r\n  children: [\r\n{ // todo include all of them in one big node \"Filter:\"\r\n  value: 'supported_model_checklist',\r\n  label: 'I need to explain specific AI model(s):',\r\n  children: [\r\n      { value: 'supported_model_model_agnostic', label: 'Any (Model agnostic xAI alg.)', sql:'xai.supported_model_model_agnostic = 1' },\r\n      { value: 'supported_model_tree_based', label: 'Tree-based', sql:'xai.supported_model_tree_based = 1' },\r\n      { value: 'supported_model_neural_network', label: 'Neural Network', sql:'xai.supported_model_neural_network = 1'  },\r\n  ],\r\n},\r\n{\r\n  value: 'required_output_checklist',\r\n  label: 'I need specific output(s) from the XAI:',\r\n  children: [\r\n      { value: 'output_importance', label: 'Feature importance (Global Explanation)', sql:'xai.output_importance = 1'},\r\n      { value: 'output_attribution', label: 'Feature attribution (Local Explanation)', sql:'xai.output_attribution = 1' }, //  # We discuss the attribution problem, i.e., the problem of distributing the prediction score of a model for a specific input to its base features (cf. [15, 10, 19]); the attribution to a base feature can be interpreted as the importance of the feature to the prediction. https://arxiv.org/pdf/1908.08474.pdf\r\n      { value: 'output_interaction', label: 'Pair feature interaction (Global Explanation)', sql:'xai.output_interaction = 1' },\r\n      // # Definition 1 (Statistical Non-Additive Interaction). A function f contains a statistical non-additive interaction of multiple features indexed in set I if and only if f cannot be decomposed into a sum of |I| subfunctions fi , each excluding the i-th interaction variable: f(x) =/= Sum i∈I fi(x\\{i}).\r\n      // #  Def. 1 identifies a non-additive effect among all features I on the output of function f (Friedman and Popescu, 2008; Sorokina et al., 2008; Tsang et al., 2018a). see https://arxiv.org/pdf/2103.03103.pdf\r\n      // # todo [after acceptance] we need a page with a clear description of each option\r\n      // { value: 'todo1', label: '#Future work: Pair interaction (Local Ex), multi F interaction, NLP, debugging ...', disabled:true  }\r\n  ]\r\n},\r\n{ value: 'required_input_data_', label: 'Check if we can NOT provide the following information to the xAI algorithm:',\r\n  children: [\r\n      { value: 'required_input_X_reference', label: 'A reference input data', sql:'xai.required_input_X_reference = 0' },\r\n      { value: 'required_input_truth_to_explain', label: 'Target values of the data points to explain (truth, not prediction)', sql:'xai.required_input_truth_to_explain = 0' },\r\n  ]\r\n},\r\n{ value: 'explainer_input_xai_', label: 'Check if we can NOT execute the following operations on the AI model:',\r\n  children: [\r\n      { value: 'required_input_predict_func', label: 'Perform addional predictions.', sql:'xai.required_input_predict_func = 0' }\r\n      // { value: 'required_input_train_function', label: '#Future work: Retrain the model.', disabled:true },\r\n  ]\r\n},\r\n{ value: 'test_adversarial_attacks', label: 'I trust the xAI output (I created the data and the model myself)', sql: \"t.category != 'fragility'\"}\r\n// { value: 'assumptions_data_distribution_iid', label: '#Future work: Assume input features to be independent and identically distributed', disabled:true },\r\n// { value: 'explainer_need_gpu', label: '#Future work: Constraint on hardware equipement: xAI alg. require a GPU.', disabled:true }\r\n// {\r\n//   value: 'uid',\r\n//   label: 'visible'\r\n// },\r\n]}];\r\n\r\nvar node_sql = {}\r\nfunction flatten_nodes(nodes, node_sql){\r\n  nodes.map( x => {if ('sql' in x) node_sql[x.value]= x.sql})\r\n  nodes.map( x => {if ('children' in x) flatten_nodes(x.children, node_sql)})\r\n}\r\nflatten_nodes(nodes, node_sql)\r\n\r\nfunction average(data) {\r\n  /*Can't find an average function in JS, made one\r\n  This function is able to handle null values!!!*/\r\n    var count = null;\r\n    var sum = null;\r\n    for (let i=0; i<data.length; i++) {\r\n      if (data[i]) {\r\n        count++;\r\n        sum = sum + data[i];\r\n      }\r\n    }\r\n    if (count) {var average = Number( sum / count)} else { average=null}\r\n    return average;\r\n  }\r\n// if (window.location.href.includes(\"localhost\")) { console.log('localhost');}\r\n\r\nconst categories = ['fidelity', 'fragility', 'stability', 'simplicity', 'stress']  // todo get it from db\r\nconst pecentage_per_category = categories.map(category => ' ROUND(AVG(case category when \\''+category+'\\' then score end)*100.0,1) AS percentage_'+category).join(',\\n ');\r\n\r\nexport default function App() {\r\n  const [db, setDb] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\r\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\r\n    // see ../craco.config.js\r\n    try {\r\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\r\n      const dataPromise = fetch(DB).then(res => res.arrayBuffer()).catch((error) => {\r\n        console.log('File not found:')\r\n        console.log(error)\r\n      });\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n      console.log('sql ok.')\r\n      setDb(new SQL.Database(new Uint8Array(buf)));\r\n    } catch (err) {\r\n      console.log('sql error:')\r\n      setError(err);\r\n    }\r\n  }, []);\r\n\r\n  if (error) return <pre>{error.toString()}</pre>;\r\n  else if (!db) return <pre>Loading...</pre>;\r\n  else return <SQLRepl db={db} />;\r\n}\r\n\r\nfunction to_dict(arr){\r\n  let dico = {}\r\n  for(let i = 0; i < arr.length; i++){\r\n      dico[arr[i]] = i;\r\n  }\r\n  return dico\r\n}\r\nconst arrayColumn = (arr, n) => arr.map(x => x[n]);\r\nconst average_score = (arr, dico) => arr.map(x => average( categories.map(c => x[dico['percentage_' + c]])));\r\n\r\nfunction sql(explainer, checked){\r\n  var where = checked.filter(checkbox_id => checkbox_id in node_sql).map( x => node_sql[x]).join(' AND ')\r\n  if (where.length > 0) where = 'Where ' + where + ' \\n'\r\n  const r = `\r\n  -- For Plotly\r\n  SELECT\tc.explainer,\r\nROUND(AVG(c.time),2) AS time_per_test,\r\ncount(c.score) AS eligible_points,\r\n` + pecentage_per_category + ` \r\nFROM cross_tab AS c\r\nLeft JOIN test AS t ON c.test = t.test\r\nLeft JOIN explainer AS xai ON c.explainer = xai.explainer\r\n` + where + ` \r\nGROUP BY c.explainer;\r\n\r\n-- details about the selected explainer\r\nSELECT\tdescription, p.source_paper_bibliography, source_code, supported_models, outputs, required_input_data\r\nFROM explainer AS xai\r\nLeft JOIN paper AS p ON xai.source_paper_tag = p.source_paper_tag\r\nWhere (explainer = '`+explainer+`');\r\n\r\n-- detailed scoring of the selected explainer\r\nSELECT\tcategory AS test_category, test.test, subtest, ROUND(score,2), ROUND(time),\r\ntest.description AS test_description\r\nFROM cross_tab\r\nLeft JOIN test ON cross_tab.test = test.test\r\nWhere (explainer = '`+explainer+`') and (score IS NOT NULL)\r\nOrder By test_category, test_subtest;\r\n`;\r\n// console.log(r)\r\nreturn r\r\n}\r\n/**\r\n * A simple SQL read-eval-print-loop\r\n * @param {{db: import(\"sql.js\").Database}} props\r\n */\r\nfunction SQLRepl({ db }) {\r\n  const [selected_explainer, setExplainer] = useState('kernel_shap');\r\n  const [checked, setChecked] = useState(['output_importance']);\r\n  const [expanded, setExpanded] = useState([]);\r\n  const [results, setResults] = useState(db.exec(sql(selected_explainer, checked)));\r\n  const [error, setError] = useState(null);\r\n  \r\n  // console.log(sql(selected_explainer));\r\n  // console.log('checked', checked);\r\n  function sql_exec(new_sql) {\r\n    try {\r\n      // The sql is executed synchronously on the UI thread. You may want to use a web worker here instead\r\n      setResults(db.exec(new_sql)); // an array of objects is returned\r\n      setError(null);\r\n    } catch (err) {\r\n      // exec throws an error when the SQL statement is invalid\r\n      setError(err);\r\n      setResults([]);\r\n    }\r\n  }\r\n\r\n  function plotly_click(data){\r\n    console.log('plotly_click:')\r\n    console.log(data)\r\n    console.log(data.points) \r\n  \r\n    let explainer = data.points[0].text\r\n  \r\n    setExplainer(explainer)\r\n    jump('explainer_title')\r\n  }\r\n  // console.log('passed explainer', selected_explainer)\r\n  // console.log(results)\r\n  // console.log(error)\r\n  var df;\r\n  df = results[0];\r\n  var column = to_dict(df.columns);\r\n\r\n  //const percentagefidelity = arrayColumn(df.values, column['percentagefidelity']);\r\n  const percentage = average_score(df.values, column)\r\n  // const percentage = arrayColumn(df.values, column['percentage']);\r\n  const time_per_test = arrayColumn(df.values, column['time_per_test']);\r\n  const eligible_points = arrayColumn(df.values, column['eligible_points']);\r\n  const text = arrayColumn(df.values, column['explainer']);\r\n  // console.log(df)\r\n\r\n  var merged = []\r\n  for (let i = 0; i < time_per_test.length; i++) {\r\n    merged.push([percentage[i], time_per_test[i]]);\r\n  }\r\n  const pareto = pf.getParetoFrontier(merged, { optimize: 'bottomRight' });\r\n\r\n  const pareto_time_per_test = arrayColumn(pareto, 1);\r\n  const pareto_percentage = arrayColumn(pareto, 0);\r\n\r\n  // }\r\n\r\n\r\n  var trace1 = { // todo after acceptance Plotly.animate('graph', { https://plotly.com/javascript/plotlyjs-function-reference/#plotlyanimate\r\n    x: time_per_test,\r\n    y: percentage,\r\n    mode: 'markers+text',\r\n    type: 'scatter',\r\n    name: 'Explainers',\r\n    text: text, // hover https://plotly.com/javascript/reference/\r\n    textposition: 'top center',\r\n    textfont: {\r\n      family:  'Raleway, sans-serif'\r\n    },\r\n    marker: { size: eligible_points }\r\n  };\r\n\r\n  var trace2 = {\r\n    x: pareto_time_per_test,\r\n    y: pareto_percentage,\r\n    mode: 'lines',\r\n    type: 'scatter',\r\n    name: 'Pareto front',\r\n    // text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\r\n    textfont : {\r\n      family:'Times New Roman'\r\n    },\r\n    textposition: 'bottom center',\r\n    // marker: { size: 6 }\r\n  };\r\n  var data = [ trace1, trace2 ];\r\n\r\n  var layout = {\r\n    xaxis: {\r\n      // range: [ 0.75, 5.25 ],\r\n      type: 'log',\r\n      autorange: true,\r\n      title: {\r\n        text: 'Average Time per test [Seconds] ↓'\r\n      }\r\n    },\r\n    yaxis: {\r\n      range: [1, 100],\r\n      title: {\r\n        text: 'Score [%] ↑'\r\n      }\r\n    },\r\n    legend: {\r\n      y: 1,\r\n      yref: 'paper',\r\n      font: {\r\n        family: 'Arial, sans-serif',\r\n        // size: 20,\r\n        // color: 'grey',\r\n      }\r\n    },\r\n\r\n    title:\"Global overview of the explainers' performance<br><b>Tip</b>: Click on an explainer for more details\"\r\n  };  // todo [after acceptance] autosize: true, https://dev.to/dheerajmurali/building-a-responsive-chart-in-react-with-plotly-js-4on8\r\n\r\n  const explainer_df = results[1]\r\n  const explainer_column = to_dict(explainer_df.columns);\r\n  const explainer_row = df.values.filter(row => row[column['explainer']] == selected_explainer )\r\n\r\n\r\n  const explainer_cat_scores = (explainer_row.length > 0) ? categories.map(c => explainer_row[0][column['percentage_' + c]]) : categories.map(c => null)\r\n  const explainer_error = (explainer_row.length > 0) ? '' : `With the applied filters, none of remaining unit tests could be applied on this explainer,\r\n  please select another one by clicking on a blue dot in the first figure.`\r\n  // console.log(df.columns)\r\n  // console.log(explainer_row)\r\n  \r\n  const explainer_scores = [{\r\n    type: 'bar',\r\n    x: explainer_cat_scores, // todo handel nan values\r\n    y: categories,\r\n    text: explainer_cat_scores,\r\n    orientation: 'h'\r\n  }];\r\n\r\n  const explainer_layout = {\r\n    title: 'Score per category',\r\n    font:{\r\n      family: 'Raleway, sans-serif'\r\n    },\r\n    showlegend: false,\r\n    xaxis: {\r\n      tickangle: -45,\r\n      range: [1, 100],\r\n      title: {\r\n        text: 'Score [%] ↑'\r\n      }\r\n    },\r\n    yaxis: {\r\n      // zeroline: false,\r\n      gridwidth: 2,\r\n      title: {\r\n        text: 'Sub scoring cartegories'\r\n      }\r\n    },\r\n    bargap :0.05\r\n  };\r\n  \r\n\r\n  return (\r\n    // todo add fork me on github\r\n    <div className=\"App\">\r\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\r\n      <pre>\r\n        <CheckboxTree\r\n            nodes={nodes}\r\n            checked={checked}\r\n            expanded={expanded}\r\n            onCheck={checked => {sql_exec(sql(selected_explainer, checked));setChecked(checked); }}\r\n            onExpand={expanded => setExpanded(expanded)}\r\n            showExpandAll={true}\r\n        />\r\n      </pre>\r\n      <Plot\r\n        data={data}\r\n        layout={layout}\r\n        onClick={plotly_click}\r\n        onHover={data => document.getElementsByClassName('nsewdrag')[0].style.cursor = 'pointer'}\r\n        onUnhover={data => document.getElementsByClassName('nsewdrag')[0].style.cursor = ''}\r\n        divId={'fig'}\r\n      />\r\n      {/* Kept XAI 11 / 11  Kept tests 18 / 18 */}\r\n      {/* on hover help https://reactjs.org/docs/events.html */}\r\n\r\n      <pre>\r\n          <ResultsTable columns={results[0].columns} values={results[0].values} />\r\n      </pre>\r\n\r\n      <h1 id='explainer_title' >{selected_explainer} Explainer:</h1>\r\n      <div>\r\n        {/* <pre id=\"description\"><b>Description:</b> {explainer_description}</pre> */\r\n        explainer_df.columns.map((key, i) => (\r\n            <pre><b>{key}:</b> {explainer_df.values[0][explainer_column[key]]}</pre> \r\n          ))\r\n        }\r\n      </div>\r\n      \r\n      <pre className=\"error\">{(explainer_error || \"\").toString()}</pre>\r\n      <Plot\r\n        data={explainer_scores}\r\n        layout={explainer_layout}\r\n        divId={'explainer_fig'}\r\n      />\r\n\r\n      <h2>Score per test:</h2>\r\n\r\n      <pre>\r\n        {\r\n          // results contains one object per select statement in the query\r\n          // results.map(({ columns, values }, i) => (\r\n          //   <ResultsTable key={i} columns={columns} values={values} />\r\n          // ))\r\n          <ResultsTable columns={results[2].columns} values={results[2].values}/>\r\n        }\r\n      </pre>\r\n      \r\n      <pre> Want to learn more about a specific test? <a href=\"https://github.com/Karim-53/Compare-xAI/blob/main/data/01_raw/test.csv\">check the full list here !</a></pre>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders a single value of the array returned by db.exec(...) as a table\r\n * @param {import(\"sql.js\").QueryExecResult} props\r\n */\r\nfunction ResultsTable({ columns, values }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {columns.map((columnName, i) => (\r\n            <td key={i}>{columnName}</td>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {\r\n          // values is an array of arrays representing the results of the query\r\n          values.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, i) => (\r\n                <td key={i}>{value}</td>\r\n              ))}\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}