{"version":3,"sources":["App.js","index.js"],"names":["App","useState","db","setDb","error","setError","useEffect","a","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","then","res","arrayBuffer","catch","console","log","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","results","setResults","length","data","x","y","mode","type","name","text","textposition","textfont","family","marker","size","className","onChange","e","sql","exec","err","target","value","placeholder","map","i","columns","values","ResultsTable","layout","xaxis","title","yaxis","legend","yref","font","columnName","row","window","location","href","includes","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.968acf60.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\"; // https://sql.js.org/#%2F=     test env https://sql.js.org/examples/GUI/index.html\n\n// Required to let webpack 4 know it needs to copy the wasm file to our assets\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\nimport Plot from 'react-plotly.js';\n\nif (window.location.href.includes(\"localhost\")) {\n  console.log('localhost');\n}\nexport default function App() {\n  const [db, setDb] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(async () => {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../craco.config.js\n    try {\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\n      const dataPromise = fetch(\"./test\").then(res => res.arrayBuffer()).catch((error) => {\n        console.log('File not found:')\n        console.log(error)\n      });\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\n      console.log('ok.')\n      setDb(new SQL.Database(new Uint8Array(buf)));\n    } catch (err) {\n      console.log('big error')\n      setError(err);\n    }\n  }, []);\n\n  if (error) return <pre>{error.toString()}</pre>;\n  else if (!db) return <pre>Loading...</pre>;\n  else return <SQLRepl db={db} />;\n}\n\n/**\n * A simple SQL read-eval-print-loop\n * @param {{db: import(\"sql.js\").Database}} props\n */\nfunction SQLRepl({ db }) {\n  const [error, setError] = useState(null);\n  const [results, setResults] = useState([]);\n\n  function exec(sql) {\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker here instead\n      sql = \"select * From summary\";\n      setResults(db.exec(sql)); // an array of objects is returned\n      setError(null);\n    } catch (err) {\n      // exec throws an error when the SQL statement is invalid\n      setError(err);\n      setResults([]);\n    }\n  }\n\n\n\n  var time_per_test = [1, 2, 3, 4, 5]\n  var percentage = [1, 6, 3, 6, 1]\n  var eligible_points = [1, 2, 10, 6, 1]\n  var text = ['Dummy-data', 'A-2', 'A-3', 'A-4', 'A-5']\n  var pareto_time_per_test = [1.5, 2.5, 3.5, 4.5, 5.5]\n  var pareto_percentage = [4, 1, 7, 1, 4]\n\n  console.log(results)\n  if (results.length> 0) {\n    console.log(results[0])\n    console.log(results[0]['time_per_test'])\n  } else {\n\n  }\n\n\n  var trace1 = {\n    x: time_per_test,\n    y: percentage,\n    mode: 'markers+text',\n    type: 'scatter',\n    name: 'Explainers',\n    text: text,\n    textposition: 'top center',\n    textfont: {\n      family:  'Raleway, sans-serif'\n    },\n    marker: { size: eligible_points }\n  };\n  \n  var trace2 = {\n    x: pareto_time_per_test,\n    y: pareto_percentage,\n    mode: 'lines',\n    type: 'scatter',\n    name: 'Pareto front',\n    // text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\n    textfont : {\n      family:'Times New Roman'\n    },\n    textposition: 'bottom center',\n    // marker: { size: 6 }\n  };\n  var data = [ trace1, trace2 ];\n  \n  var layout = {\n    xaxis: {\n      // range: [ 0.75, 5.25 ],\n      // log_x=True, todo\n      title: {\n        text: 'Average Time per test [Seconds] ↓'\n      }\n    },\n    yaxis: {\n      // range: [0, 100], todo\n      title: {\n        text: 'Score [%] ↑'\n      }\n    },\n    legend: {\n      y: 1,\n      yref: 'paper',\n      font: {\n        family: 'Arial, sans-serif',\n        // size: 20,\n        // color: 'grey',\n      }\n    },\n    title:\"Global overview of the explainers' performance\"\n  };\n  \n  // Plotly.newPlot('myDiv', data, layout);\n\n  \n\n\n  return (\n    <div className=\"App\">\n      <h1>React SQL interpreter</h1>\n\n      <textarea\n        onChange={(e) => exec(e.target.value)}\n        placeholder=\"Enter some SQL. No inspiration ? Try “select sqlite_version()”\"\n      ></textarea>\n\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\n\n      <pre>\n        {\n          // results contains one object per select statement in the query\n          results.map(({ columns, values }, i) => (\n            <ResultsTable key={i} columns={columns} values={values} />\n          ))\n        }\n      </pre>\n      \n      <Plot\n        data={data}\n        layout={layout}\n      />\n    </div>\n  );\n}\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n * @param {import(\"sql.js\").QueryExecResult} props\n */\nfunction ResultsTable({ columns, values }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((columnName, i) => (\n            <td key={i}>{columnName}</td>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          // values is an array of arrays representing the results of the query\n          values.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, i) => (\n                <td key={i}>{value}</td>\n              ))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}