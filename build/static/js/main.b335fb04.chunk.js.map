{"version":3,"sources":["database","App.js","index.js"],"names":["App","useState","db","setDb","error","setError","useEffect","a","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","DB","then","res","arrayBuffer","catch","console","log","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","window","location","href","includes","arrayColumn","arr","n","map","x","plotly_click","data","points","text","sql_exec","sql","setResults","exec","err","df","results","column","dico","i","length","to_dict","columns","time_per_test","values","percentage","eligible_points","merged","push","pareto","pf","getParetoFrontier","optimize","y","mode","type","name","textposition","textfont","family","marker","size","className","layout","xaxis","autorange","title","yaxis","legend","yref","font","onClick","divId","onChange","e","target","value","placeholder","ResultsTable","columnName","row","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b335fb04.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/database.4723bfa2.bin\";","// some sql.js op https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\"; // https://sql.js.org/#%2F=     test env https://sql.js.org/examples/GUI/index.html\nimport pf from 'pareto-frontier';\nimport DB from './database';\n// Required to let webpack 4 know it needs to copy the wasm file to our assets\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\nimport Plot from 'react-plotly.js';\n// import DataTable from 'react-data-table-component'; todo [after acceptance] https://datatables.net/\n\nif (window.location.href.includes(\"localhost\")) {\n  console.log('localhost');\n}\nexport default function App() {\n  const [db, setDb] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(async () => {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../craco.config.js\n    try {\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\n      const dataPromise = fetch(DB).then(res => res.arrayBuffer()).catch((error) => {\n        console.log('File not found:')\n        console.log(error)\n      });\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\n      console.log('sql ok.')\n      setDb(new SQL.Database(new Uint8Array(buf)));\n    } catch (err) {\n      console.log('sql error:')\n      setError(err);\n    }\n  }, []);\n\n  if (error) return <pre>{error.toString()}</pre>;\n  else if (!db) return <pre>Loading...</pre>;\n  else return <SQLRepl db={db} />;\n}\n\nfunction to_dict(arr){\n  let dico = {}\n  for(let i = 0; i < arr.length; i++){ \n      dico[arr[i]] = i;\n  }\n  return dico\n}\nconst arrayColumn = (arr, n) => arr.map(x => x[n]);\n\nfunction plotly_click(data){\n  \n  console.log('plotly_click:')\n  console.log(data)\n  console.log(data.points)\n\n\n  // var myPlot = document.getElementById('fig');\n\n  // myPlot.on('plotly_click', plotly_click(data))\n\n  let explainer = data.points[0].text\n  // console.log(explainer)\n  // sql = 'Select * from Explainer Where name = ' + explainer\n  // result = db.exec(sql)\n\n}\nfunction sql_exec(sql) {\n  try {\n    // The sql is executed synchronously on the UI thread.\n    // You may want to use a web worker here instead\n    sql = `SELECT explainer, AVG(score)*100.0 AS percentage, AVG(time) AS time_per_test, count(score) AS eligible_points\n    FROM cross_tab\n    GROUP BY explainer;`;\n    setResults(db.exec(sql)); // an array of objects is returned\n    setError(null);\n  } catch (err) {\n    // exec throws an error when the SQL statement is invalid\n    setError(err);\n    setResults([]);\n  }\n}\n/**\n * A simple SQL read-eval-print-loop\n * @param {{db: import(\"sql.js\").Database}} props\n */\nfunction SQLRepl({ db }) {\n  const [error, setError] = useState(null);\n  const [results, setResults] = useState([]);\n\n\n  var df;\n  // console.log(results)\n  if (results.length==0) {\n    df = {\n        \"columns\": [\n            \"index\",\n            \"time\",\n            \"score\",\n            \"eligible_points\",\n            \"percentage\",\n            \"eligible_tests\",\n            \"time_per_test\"\n        ],\n        \"values\": [\n            [\n                \"baseline_random\",\n                1.0000317096710205,\n                3.1298593441845237,\n                18,\n                0.173881074676918,\n                12,\n                0.08333597580591838\n            ],\n            [\n                \"saabas\",\n                0.10822415351867676,\n                6.035704433917999,\n                11,\n                0.5487004030834545,\n                6,\n                0.01803735891977946\n            ],\n            [\n                \"tree_shap\",\n                0.08579039573669434,\n                8.256456856690342,\n                11,\n                0.7505869869718492,\n                6,\n                0.014298399289449057\n            ],\n            [\n                \"archipelago\",\n                1.1139461994171143,\n                4,\n                5,\n                0.8,\n                5,\n                0.22278923988342286\n            ],\n            [\n                \"shapley_taylor_interaction\",\n                9.025943517684937,\n                3.2907431753151344,\n                5,\n                0.6581486350630269,\n                5,\n                1.8051887035369873\n            ],\n            [\n                \"shap_interaction\",\n                169.72328877449036,\n                1.0155440414507773,\n                5,\n                0.20310880829015546,\n                5,\n                33.944657754898074\n            ],\n            [\n                \"anova\",\n                49.0090274810791,\n                1.133826538897581,\n                5,\n                0.2267653077795162,\n                5,\n                9.80180549621582\n            ],\n            [\n                \"sage\",\n                103.58940887451172,\n                5.019767485198745,\n                7,\n                0.7171096407426779,\n                7,\n                14.798486982073102\n            ],\n            [\n                \"lime\",\n                825.8491969108582,\n                10.661781883892203,\n                13,\n                0.8201370679917079,\n                7,\n                117.97845670155117\n            ],\n            [\n                \"kernel_shap\",\n                50.426323652267456,\n                10.133078100329183,\n                11,\n                0.9211889182117439,\n                6,\n                8.404387275377909\n            ],\n            [\n                \"maple\",\n                966.3937382698059,\n                9.22704081632653,\n                13,\n                0.7097723704866562,\n                7,\n                138.05624832425798\n            ]\n        ]\n    };\n  } else {\n    // console.log(results[0]);\n    df = results[0];\n  }\n  // var time_per_test = [1, 2, 3, 4, 5]\n  // var percentage = [1, 6, 3, 6, 1]\n  // var eligible_points = [1, 2, 10, 6, 1]\n  // var text = ['Dummy-data', 'A-2', 'A-3', 'A-4', 'A-5']\n  // var pareto_time_per_test = [1.5, 2.5, 3.5, 4.5, 5.5]\n  // var pareto_percentage = [4, 1, 7, 1, 4]\n\n  // if (results.length> 0) {\n  var column = to_dict(df.columns)\n  var time_per_test = arrayColumn(df.values, column['time_per_test']);\n  var percentage = arrayColumn(df.values, column['percentage']);\n  var eligible_points = arrayColumn(df.values, column['eligible_points']);\n  var text = arrayColumn(df.values, column['index']);\n\n\n  var merged = []\n  for (let i = 0; i < time_per_test.length; i++) {\n    merged.push([percentage[i], time_per_test[i]]);\n  }\n  const pareto = pf.getParetoFrontier(merged, { optimize: 'bottomRight' });\n\n  var pareto_time_per_test = arrayColumn(pareto, 1);\n  var pareto_percentage = arrayColumn(pareto, 0);\n\n  // }\n\n\n  var trace1 = { // todo after acceptance Plotly.animate('graph', { https://plotly.com/javascript/plotlyjs-function-reference/#plotlyanimate\n    x: time_per_test,\n    y: percentage,\n    mode: 'markers+text',\n    type: 'scatter',\n    name: 'Explainers',\n    text: text, // hover https://plotly.com/javascript/reference/\n    textposition: 'top center',\n    textfont: {\n      family:  'Raleway, sans-serif'\n    },\n    marker: { size: eligible_points }\n  };\n  \n  var trace2 = {\n    x: pareto_time_per_test,\n    y: pareto_percentage,\n    mode: 'lines',\n    type: 'scatter',\n    name: 'Pareto front',\n    // text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\n    textfont : {\n      family:'Times New Roman'\n    },\n    textposition: 'bottom center',\n    // marker: { size: 6 }\n  };\n  var data = [ trace1, trace2 ];\n  \n  var layout = {\n    xaxis: {\n      // range: [ 0.75, 5.25 ],\n      type: 'log',\n      autorange: true,\n      title: {\n        text: 'Average Time per test [Seconds] ↓'\n      }\n    },\n    yaxis: {\n      // range: [0, 100], todo\n      title: {\n        text: 'Score [%] ↑'\n      }\n    },\n    legend: {\n      y: 1,\n      yref: 'paper',\n      font: {\n        family: 'Arial, sans-serif',\n        // size: 20,\n        // color: 'grey',\n      }\n    },\n    \n    title:\"Global overview of the explainers' performance\"\n  };  // todo [after acceptance] autosize: true, https://dev.to/dheerajmurali/building-a-responsive-chart-in-react-with-plotly-js-4on8\n  \n  // Plotly.newPlot('myDiv', data, layout);\n\n  \n\n\n  return (\n    <div className=\"App\">\n      <Plot\n        data={data}\n        layout={layout}\n        onClick={plotly_click}\n        divId={'fig'}\n      />\n      <h1>Filters</h1>\n\n      <textarea\n        onChange={(e) => sql_exec(e.target.value)}\n        placeholder=\"Enter some SQL. No inspiration ? Try “select sqlite_version()”\"\n      ></textarea>\n\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\n\n      <pre>\n        {\n          // results contains one object per select statement in the query\n          results.map(({ columns, values }, i) => (\n            <ResultsTable key={i} columns={columns} values={values} />\n          ))\n        }\n      </pre>\n      \n      <h1>Click on an explainer for more details</h1>\n    </div>\n  );\n}\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n * @param {import(\"sql.js\").QueryExecResult} props\n */\nfunction ResultsTable({ columns, values }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((columnName, i) => (\n            <td key={i}>{columnName}</td>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          // values is an array of arrays representing the results of the query\n          values.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, i) => (\n                <td key={i}>{value}</td>\n              ))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n\n\n\n\n\n  // SELECT *\n  // FROM cross_tab","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}