{"version":3,"sources":["database","App.js","index.js"],"names":["nodes","value","label","children","disabled","window","location","href","includes","console","log","pecentage_per_category","map","category","join","App","useState","db","setDb","error","setError","useEffect","a","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","DB","then","res","arrayBuffer","catch","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","arrayColumn","arr","n","x","average_score","dico","data","count","sum","i","length","average","Number","sql","explainer","checked","r","df","selected_explainer","setExplainer","setChecked","expanded","setExpanded","exec","results","setResults","column","to_dict","columns","percentage","values","time_per_test","eligible_points","text","merged","push","pareto","pf","getParetoFrontier","optimize","y","mode","type","name","textposition","textfont","family","marker","size","className","layout","xaxis","autorange","title","yaxis","legend","yref","font","onClick","points","divId","onCheck","onExpand","showExpandAll","id","onChange","e","sql_bof","err","sql_exec","target","placeholder","ResultsTable","columnName","row","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dfd21795.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/database.40437442.bin\";","// some sql.js op https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\"; // https://sql.js.org/#%2F=     test env https://sql.js.org/examples/GUI/index.html\nimport pf from 'pareto-frontier';\nimport DB from './database';\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\"; // Required to let webpack 4 know it needs to copy the wasm file to our assets\nimport Plot from 'react-plotly.js';\nimport CheckboxTree from 'react-checkbox-tree';\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\n// import DataTable from 'react-data-table-component'; todo [after acceptance] https://datatables.net/\nconst nodes = [\n{ // todo include all of them in one big node \"Filter:\"\n  value: 'supported_models_checklist',\n  label: 'I need to explain specific AI model(s):',\n  children: [\n      { value: 'model_agnostic', label: 'Any (Model agnostic xAI alg.)' },\n      { value: 'tree_based', label: 'Tree-based' },\n      { value: 'neural_network', label: 'Neural Network' },\n  ],\n},\n{\n  value: 'required_output_checklist',\n  label: 'I need specific output(s) from the XAI:',\n  children: [\n      { value: 'output_importance', label: 'Feature importance (Global Explanation)'},\n      { value: 'output_attribution', label: 'Feature attribution (Local Explanation)' }, //  # We discuss the attribution problem, i.e., the problem of distributing the prediction score of a model for a specific input to its base features (cf. [15, 10, 19]); the attribution to a base feature can be interpreted as the importance of the feature to the prediction. https://arxiv.org/pdf/1908.08474.pdf\n      { value: 'output_interaction', label: 'Pair feature interaction (Global Explanation)' },\n      // # Definition 1 (Statistical Non-Additive Interaction). A function f contains a statistical non-additive interaction of multiple features indexed in set I if and only if f cannot be decomposed into a sum of |I| subfunctions fi , each excluding the i-th interaction variable: f(x) =/= Sum i∈I fi(x\\{i}).\n      // #  Def. 1 identifies a non-additive effect among all features I on the output of function f (Friedman and Popescu, 2008; Sorokina et al., 2008; Tsang et al., 2018a). see https://arxiv.org/pdf/2103.03103.pdf\n      // # todo [after acceptance] we need a page with a clear description of each option\n      { value: 'todo1', label: '#Future work: Pair interaction (Local Ex), multi F interaction, NLP, debugging ...', disabled:true  }\n  ]\n},\n{\n  value: 'required_input_data_',\n  label: 'Select if we can not provide the following information to the xAI algorithm:',\n  children: [\n      { value: 'required_input_X_reference', label: 'A reference input data' },\n      { value: 'required_input_truth_to_explain', label: 'Target values of the data points to explain (truth, not prediction)' },\n  ]\n},\n{\n  value: 'explainer_input_xai_',\n  label: 'Select if we can not execute the following operations on the AI model:',\n  children: [\n      { value: 'required_input_predict_func', label: 'Perform addional predictions.' },\n      { value: 'required_input_train_function', label: '#Future work: Retrain the model.', disabled:true },\n  ]\n},\n{\n  value: 'test_adversarial_attacks',\n  label: 'I trust the xAI output (I created the data and the model myself)'\n},\n{\n  value: 'assumptions_data_distribution_iid',\n  label: '#Future work: Assume input features to be independent and uniformly distributed', disabled:true \n},\n{\n  value: 'explainer_need_gpu',\n  label: '#Future work: Constraint on hardware equipement: xAI alg. require a GPU.', disabled:true \n}\n// {\n//   value: 'uid',\n//   label: 'visible'\n// },\n];\n\n\nfunction average(data) {\n  /*Can't find an average function in JS, made one\n  This function is able to handle null values!!!*/\n    var count = null;\n    var sum = null;\n    for (let i=0; i<data.length; i++) {\n      if (data[i]) {\n        count++;\n        sum = sum + data[i];\n      }\n    }\n    if (count) {var average = Number( sum / count)} else { average=null}\n    return average;\n  }\nif (window.location.href.includes(\"localhost\")) { console.log('localhost');}\n\nconst categories = ['fidelity', 'fragility', 'stability', 'simplicity', 'stress']  // todo get it from db\nconst pecentage_per_category = categories.map(category => ' ROUND(AVG(case category when \\''+category+'\\' then score end)*100.0,1) AS percentage_'+category).join(',\\n ');\n\nexport default function App() {\n  const [db, setDb] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(async () => {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../craco.config.js\n    try {\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\n      const dataPromise = fetch(DB).then(res => res.arrayBuffer()).catch((error) => {\n        console.log('File not found:')\n        console.log(error)\n      });\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\n      console.log('sql ok.')\n      setDb(new SQL.Database(new Uint8Array(buf)));\n    } catch (err) {\n      console.log('sql error:')\n      setError(err);\n    }\n  }, []);\n\n  if (error) return <pre>{error.toString()}</pre>;\n  else if (!db) return <pre>Loading...</pre>;\n  else return <SQLRepl db={db} />;\n}\n\nfunction to_dict(arr){\n  let dico = {}\n  for(let i = 0; i < arr.length; i++){\n      dico[arr[i]] = i;\n  }\n  return dico\n}\nconst arrayColumn = (arr, n) => arr.map(x => x[n]);\nconst average_score = (arr, dico) => arr.map(x => average([x[dico['percentage_fidelity']],x[dico['percentage_stability']]]));\n\nfunction sql(explainer, checked){\n\n  const r = `SELECT\texplainer,\nROUND(AVG(time),2) AS time_per_test,\ncount(score) AS eligible_points,\n` + pecentage_per_category + ` \nFROM cross_tab\nLeft JOIN test ON cross_tab.test = test.test\nGROUP BY explainer;\n\nSELECT\tcategory AS test_category, test.test, subtest, ROUND(score,2), ROUND(time),\ntest.description AS test_description\nFROM cross_tab\nLeft JOIN test ON cross_tab.test = test.test\nWhere (explainer = '`+explainer+`') and (score IS NOT NULL)\nOrder By test_category, test_subtest;\n`;\nconsole.log(r)\nreturn r\n}\n/**\n * A simple SQL read-eval-print-loop\n * @param {{db: import(\"sql.js\").Database}} props\n */\nfunction SQLRepl({ db }) {\n  const [selected_explainer, setExplainer] = useState('kernel_shap');\n  const [checked, setChecked] = useState(['output_importance']);\n  const [expanded, setExpanded] = useState([]);\n  const [results, setResults] = useState(db.exec(sql(selected_explainer, checked)));\n  const [error, setError] = useState(null);\n  \n  console.log(sql(selected_explainer));\n  console.log('checked', checked);\n  function sql_exec(sql_bof) {\n    try {\n      // The sql is executed synchronously on the UI thread. You may want to use a web worker here instead\n      setResults(db.exec(sql(selected_explainer))); // an array of objects is returned\n      setError(null);\n    } catch (err) {\n      // exec throws an error when the SQL statement is invalid\n      setError(err);\n      setResults([]);\n    }\n  }\n  function plotly_click(data){\n    console.log('plotly_click:')\n    console.log(data)\n    console.log(data.points) \n  \n    let explainer = data.points[0].text\n  \n    setExplainer(explainer)\n  }\n  console.log('passed explainer', selected_explainer)\n  console.log(results)\n  var df;\n  df = results[0];\n  var column = to_dict(df.columns);\n\n  //const percentagefidelity = arrayColumn(df.values, column['percentagefidelity']);\n  const percentage = average_score(df.values, column)\n  // const percentage = arrayColumn(df.values, column['percentage']);\n  const time_per_test = arrayColumn(df.values, column['time_per_test']);\n  const eligible_points = arrayColumn(df.values, column['eligible_points']);\n  const text = arrayColumn(df.values, column['explainer']);\n  console.log(df)\n\n  var merged = []\n  for (let i = 0; i < time_per_test.length; i++) {\n    merged.push([percentage[i], time_per_test[i]]);\n  }\n  const pareto = pf.getParetoFrontier(merged, { optimize: 'bottomRight' });\n\n  const pareto_time_per_test = arrayColumn(pareto, 1);\n  const pareto_percentage = arrayColumn(pareto, 0);\n\n  // }\n\n\n  var trace1 = { // todo after acceptance Plotly.animate('graph', { https://plotly.com/javascript/plotlyjs-function-reference/#plotlyanimate\n    x: time_per_test,\n    y: percentage,\n    mode: 'markers+text',\n    type: 'scatter',\n    name: 'Explainers',\n    text: text, // hover https://plotly.com/javascript/reference/\n    textposition: 'top center',\n    textfont: {\n      family:  'Raleway, sans-serif'\n    },\n    marker: { size: eligible_points }\n  };\n\n  var trace2 = {\n    x: pareto_time_per_test,\n    y: pareto_percentage,\n    mode: 'lines',\n    type: 'scatter',\n    name: 'Pareto front',\n    // text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\n    textfont : {\n      family:'Times New Roman'\n    },\n    textposition: 'bottom center',\n    // marker: { size: 6 }\n  };\n  var data = [ trace1, trace2 ];\n\n  var layout = {\n    xaxis: {\n      // range: [ 0.75, 5.25 ],\n      type: 'log',\n      autorange: true,\n      title: {\n        text: 'Average Time per test [Seconds] ↓'\n      }\n    },\n    yaxis: {\n      // range: [0, 100], todo\n      title: {\n        text: 'Score [%] ↑'\n      }\n    },\n    legend: {\n      y: 1,\n      yref: 'paper',\n      font: {\n        family: 'Arial, sans-serif',\n        // size: 20,\n        // color: 'grey',\n      }\n    },\n\n    title:\"Global overview of the explainers' performance\"\n  };  // todo [after acceptance] autosize: true, https://dev.to/dheerajmurali/building-a-responsive-chart-in-react-with-plotly-js-4on8\n\n  // Plotly.newPlot('myDiv', data, layout);\n\n\n\n\n  return (\n    <div className=\"App\">\n      <Plot\n        data={data}\n        layout={layout}\n        onClick={plotly_click}\n        divId={'fig'}\n      />\n      <h1>Filters</h1> \n      <pre>\n        <CheckboxTree\n            nodes={nodes}\n            checked={checked}\n            expanded={expanded}\n            onCheck={checked => {setChecked(checked)}}\n            onExpand={expanded => setExpanded(expanded)}\n            showExpandAll={true}\n        />\n      </pre>\n      {/* Kept XAI 11 / 11  Kept tests 18 / 18 */}\n      {/* on hover help https://reactjs.org/docs/events.html */}\n\n      <h1 id='explainer_title' >Click on an explainer for more details</h1>\n\n      <textarea\n        onChange={(e) => sql_exec(e.target.value)}\n        placeholder=\"Enter some SQL. No inspiration ? Try “select sqlite_version()”\"\n      ></textarea>\n\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\n\n      <pre>\n        {\n          // results contains one object per select statement in the query\n          results.map(({ columns, values }, i) => (\n            <ResultsTable key={i} columns={columns} values={values} />\n          ))\n        }\n      </pre>\n\n    </div>\n  );\n}\n\n/**\n * Renders a single value of the array returned by db.exec(...) as a table\n * @param {import(\"sql.js\").QueryExecResult} props\n */\nfunction ResultsTable({ columns, values }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((columnName, i) => (\n            <td key={i}>{columnName}</td>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          // values is an array of arrays representing the results of the query\n          values.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, i) => (\n                <td key={i}>{value}</td>\n              ))}\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}