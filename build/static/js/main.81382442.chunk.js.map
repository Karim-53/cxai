{"version":3,"sources":["App.js","index.js"],"names":["App","useState","db","setDb","error","setError","useEffect","a","sqlPromise","initSqlJs","locateFile","sqlWasm","dataPromise","fetch","then","res","arrayBuffer","catch","console","log","Promise","all","SQL","buf","Database","Uint8Array","toString","SQLRepl","results","setResults","className","onChange","e","sql","exec","err","target","value","placeholder","map","i","columns","values","ResultsTable","columnName","row","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"oiBAOe,SAASA,IACtB,MAAoBC,mBAAS,MAA7B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,oBAAS,sBAAC,sCAAAC,EAAA,sEAKAC,EAAaC,IAAU,CAAEC,WAAY,kBAAMC,OAC3CC,EAAcC,MAAM,UAAUC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAAeC,OAAM,SAACb,GACxEc,QAAQC,IAAI,mBACZD,QAAQC,IAAIf,MARR,SAUmBgB,QAAQC,IAAI,CAACb,EAAYI,IAV5C,mCAUCU,EAVD,KAUMC,EAVN,KAWNL,QAAQC,IAAI,OACZhB,EAAM,IAAImB,EAAIE,SAAS,IAAIC,WAAWF,KAZhC,kDAcNlB,EAAS,EAAD,IAdF,0DAgBP,IAECD,EAAc,8BAAMA,EAAMsB,aACpBxB,EACE,cAACyB,EAAD,CAASzB,GAAIA,IADJ,6CAQvB,SAASyB,EAAT,GAA0B,IAAPzB,EAAM,EAANA,GACjB,EAA0BD,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KAeA,OACE,sBAAKC,UAAU,MAAf,UACE,uDAEA,0BACEC,SAAU,SAACC,GAAD,OAlBhB,SAAcC,GACZ,IAGEJ,EAAW3B,EAAGgC,KAAKD,IACnB5B,EAAS,MACT,MAAO8B,GAEP9B,EAAS8B,GACTN,EAAW,KASQK,CAAKF,EAAEI,OAAOC,QAC/BC,YAAY,6EAGd,qBAAKR,UAAU,QAAf,UAAyB1B,GAAS,IAAIsB,aAEtC,8BAGIE,EAAQW,KAAI,WAAsBC,GAAtB,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACV,cAACC,EAAD,CAAsBF,QAASA,EAASC,OAAQA,GAA7BF,WAY/B,SAASG,EAAT,GAA4C,IAApBF,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC/B,OACE,kCACE,gCACE,6BACGD,EAAQF,KAAI,SAACK,EAAYJ,GAAb,OACX,6BAAaI,GAAJJ,UAKf,gCAGIE,EAAOH,KAAI,SAACM,EAAKL,GAAN,OACT,6BACGK,EAAIN,KAAI,SAACF,EAAOG,GAAR,OACP,6BAAaH,GAAJG,OAFJA,WC5FrB,IAAMM,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnD,EAAD,MAEF8C,K","file":"static/js/main.81382442.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport initSqlJs from \"sql.js\";\r\n\r\n// Required to let webpack 4 know it needs to copy the wasm file to our assets\r\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\r\n\r\nexport default function App() {\r\n  const [db, setDb] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\r\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\r\n    // see ../craco.config.js\r\n    try {\r\n      const sqlPromise = initSqlJs({ locateFile: () => sqlWasm });\r\n      const dataPromise = fetch(\"./test\").then(res => res.arrayBuffer()).catch((error) => {\r\n        console.log('File not found:')\r\n        console.log(error)\r\n      });\r\n      const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\r\n      console.log('ok.')\r\n      setDb(new SQL.Database(new Uint8Array(buf)));\r\n    } catch (err) {\r\n      setError(err);\r\n    }\r\n  }, []);\r\n\r\n  if (error) return <pre>{error.toString()}</pre>;\r\n  else if (!db) return <pre>Loading...</pre>;\r\n  else return <SQLRepl db={db} />;\r\n}\r\n\r\n/**\r\n * A simple SQL read-eval-print-loop\r\n * @param {{db: import(\"sql.js\").Database}} props\r\n */\r\nfunction SQLRepl({ db }) {\r\n  const [error, setError] = useState(null);\r\n  const [results, setResults] = useState([]);\r\n\r\n  function exec(sql) {\r\n    try {\r\n      // The sql is executed synchronously on the UI thread.\r\n      // You may want to use a web worker here instead\r\n      setResults(db.exec(sql)); // an array of objects is returned\r\n      setError(null);\r\n    } catch (err) {\r\n      // exec throws an error when the SQL statement is invalid\r\n      setError(err);\r\n      setResults([]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>React SQL interpreter</h1>\r\n\r\n      <textarea\r\n        onChange={(e) => exec(e.target.value)}\r\n        placeholder=\"Enter some SQL. No inspiration ? Try “select sqlite_version()”\"\r\n      ></textarea>\r\n\r\n      <pre className=\"error\">{(error || \"\").toString()}</pre>\r\n\r\n      <pre>\r\n        {\r\n          // results contains one object per select statement in the query\r\n          results.map(({ columns, values }, i) => (\r\n            <ResultsTable key={i} columns={columns} values={values} />\r\n          ))\r\n        }\r\n      </pre>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders a single value of the array returned by db.exec(...) as a table\r\n * @param {import(\"sql.js\").QueryExecResult} props\r\n */\r\nfunction ResultsTable({ columns, values }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {columns.map((columnName, i) => (\r\n            <td key={i}>{columnName}</td>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {\r\n          // values is an array of arrays representing the results of the query\r\n          values.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, i) => (\r\n                <td key={i}>{value}</td>\r\n              ))}\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}